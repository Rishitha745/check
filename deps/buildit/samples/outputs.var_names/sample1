STMT_BLOCK
  DECL_STMT
    SCALAR_TYPE (INT)
    VAR (a_0)
    INT_CONST (0)
  DECL_STMT
    SCALAR_TYPE (INT)
    VAR (b_1)
    VAR_EXPR
      VAR (a_0)
  EXPR_STMT
    AND_EXPR
      VAR_EXPR
        VAR (a_0)
      VAR_EXPR
        VAR (b_1)
  EXPR_STMT
    BITWISE_AND_EXPR
      VAR_EXPR
        VAR (a_0)
      VAR_EXPR
        VAR (b_1)
  EXPR_STMT
    PLUS_EXPR
      VAR_EXPR
        VAR (b_1)
      INT_CONST (1)
  EXPR_STMT
    PLUS_EXPR
      INT_CONST (1)
      VAR_EXPR
        VAR (b_1)
  EXPR_STMT
    MOD_EXPR
      VAR_EXPR
        VAR (a_0)
      INT_CONST (2)
  EXPR_STMT
    BITWISE_OR_EXPR
      VAR_EXPR
        VAR (a_0)
      INT_CONST (2)
  EXPR_STMT
    RSHIFT_EXPR
      VAR_EXPR
        VAR (a_0)
      INT_CONST (2)
  EXPR_STMT
    LSHIFT_EXPR
      VAR_EXPR
        VAR (b_1)
      INT_CONST (3)
  EXPR_STMT
    BITWISE_XOR_EXPR
      VAR_EXPR
        VAR (a_0)
      VAR_EXPR
        VAR (b_1)
  EXPR_STMT
    ASSIGN_EXPR
      VAR_EXPR
        VAR (a_0)
      PLUS_EXPR
        VAR_EXPR
          VAR (a_0)
        VAR_EXPR
          VAR (b_1)
  EXPR_STMT
    ASSIGN_EXPR
      VAR_EXPR
        VAR (b_1)
      MUL_EXPR
        VAR_EXPR
          VAR (b_1)
        VAR_EXPR
          VAR (b_1)
  EXPR_STMT
    ASSIGN_EXPR
      VAR_EXPR
        VAR (a_0)
      BITWISE_AND_EXPR
        VAR_EXPR
          VAR (a_0)
        VAR_EXPR
          VAR (b_1)
  EXPR_STMT
    ASSIGN_EXPR
      VAR_EXPR
        VAR (a_0)
      BITWISE_OR_EXPR
        VAR_EXPR
          VAR (a_0)
        VAR_EXPR
          VAR (b_1)
  EXPR_STMT
    ASSIGN_EXPR
      VAR_EXPR
        VAR (a_0)
      BITWISE_XOR_EXPR
        VAR_EXPR
          VAR (a_0)
        VAR_EXPR
          VAR (b_1)
  EXPR_STMT
    BITWISE_NOT_EXPR
      VAR_EXPR
        VAR (b_1)
{
  int a_0 = 0;
  int b_1 = a_0;
  a_0 && b_1;
  a_0 & b_1;
  b_1 + 1;
  1 + b_1;
  a_0 % 2;
  a_0 | 2;
  a_0 >> 2;
  b_1 << 3;
  a_0 ^ b_1;
  a_0 = a_0 + b_1;
  b_1 = b_1 * b_1;
  a_0 = a_0 & b_1;
  a_0 = a_0 | b_1;
  a_0 = a_0 ^ b_1;
  ~(b_1);
}
